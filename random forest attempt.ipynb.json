{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn import svm\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/christianbamber\r\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mkdir: tmp: File exists\r\n"
     ]
    }
   ],
   "source": [
    "mkdir tmp\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/christianbamber/tmp\n"
     ]
    }
   ],
   "source": [
    "cd tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import abbreviated dataset\n",
    "df=pd.read_excel('l4_image5_noctiluca_iloc.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>45</th>\n",
       "      <th>46</th>\n",
       "      <th>47</th>\n",
       "      <th>48</th>\n",
       "      <th>49</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>id</td>\n",
       "      <td>image_x</td>\n",
       "      <td>image_y</td>\n",
       "      <td>image_w</td>\n",
       "      <td>image_h</td>\n",
       "      <td>src_x</td>\n",
       "      <td>src_y</td>\n",
       "      <td>src_image</td>\n",
       "      <td>cal_image</td>\n",
       "      <td>ppc</td>\n",
       "      <td>...</td>\n",
       "      <td>intensity_calimage</td>\n",
       "      <td>raw_convex_hull_area</td>\n",
       "      <td>raw_filled_area</td>\n",
       "      <td>filled_area</td>\n",
       "      <td>feret_max_angle</td>\n",
       "      <td>feret_min_angle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>collage_file</td>\n",
       "      <td>image_id</td>\n",
       "      <td>noctiluca</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>146</td>\n",
       "      <td>166</td>\n",
       "      <td>51</td>\n",
       "      <td>328</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>767</td>\n",
       "      <td>655</td>\n",
       "      <td>41860.7</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-11-13T14:53:38.724</td>\n",
       "      <td>L4_13112019_run1_000001.tif</td>\n",
       "      <td>C3E17025-77F4-4EEE-916C-E00EB50FE38E</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>80</td>\n",
       "      <td>864</td>\n",
       "      <td>66</td>\n",
       "      <td>329</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>383</td>\n",
       "      <td>223</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>40</td>\n",
       "      <td>-45</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>L4_13112019_run1_000001.tif</td>\n",
       "      <td>2CAA2D06-2722-47D6-AF38-98114A3056D1</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>94</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>93</td>\n",
       "      <td>452</td>\n",
       "      <td>165</td>\n",
       "      <td>329</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>513.5</td>\n",
       "      <td>201</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>-55</td>\n",
       "      <td>30</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>L4_13112019_run1_000001.tif</td>\n",
       "      <td>AB9D8EC6-2DAD-4FB0-AA2D-6A2ADC4290D7</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>154</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>461</td>\n",
       "      <td>150</td>\n",
       "      <td>1236</td>\n",
       "      <td>329</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>4344</td>\n",
       "      <td>1777</td>\n",
       "      <td>130636</td>\n",
       "      <td>-85</td>\n",
       "      <td>5</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>L4_13112019_run1_000001.tif</td>\n",
       "      <td>242667D9-A247-4010-A43F-85CCB421A36A</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   1        2        3        4        5      6      7          8          9   \\\n",
       "0  id  image_x  image_y  image_w  image_h  src_x  src_y  src_image  cal_image   \n",
       "1   1        0        0       13      146    166     51        328          1   \n",
       "2   2       15        0       77       80    864     66        329          1   \n",
       "3   3       94        0       58       93    452    165        329          1   \n",
       "4   4      154        0       38      461    150   1236        329          1   \n",
       "\n",
       "    10  ...                  45                    46               47  \\\n",
       "0  ppc  ...  intensity_calimage  raw_convex_hull_area  raw_filled_area   \n",
       "1    1  ...                   0                   767              655   \n",
       "2    1  ...                   0                   383              223   \n",
       "3    1  ...                   0                 513.5              201   \n",
       "4    1  ...                   0                  4344             1777   \n",
       "\n",
       "            48               49               50                       51  \\\n",
       "0  filled_area  feret_max_angle  feret_min_angle                      NaN   \n",
       "1      41860.7              -90                0  2019-11-13T14:53:38.724   \n",
       "2      10743.5               40              -45  2019-11-13T14:53:38.825   \n",
       "3      9311.07              -55               30  2019-11-13T14:53:38.825   \n",
       "4       130636              -85                5  2019-11-13T14:53:38.825   \n",
       "\n",
       "                            52                                    53  \\\n",
       "0                 collage_file                              image_id   \n",
       "1  L4_13112019_run1_000001.tif  C3E17025-77F4-4EEE-916C-E00EB50FE38E   \n",
       "2  L4_13112019_run1_000001.tif  2CAA2D06-2722-47D6-AF38-98114A3056D1   \n",
       "3  L4_13112019_run1_000001.tif  AB9D8EC6-2DAD-4FB0-AA2D-6A2ADC4290D7   \n",
       "4  L4_13112019_run1_000001.tif  242667D9-A247-4010-A43F-85CCB421A36A   \n",
       "\n",
       "          54  \n",
       "0  noctiluca  \n",
       "1          n  \n",
       "2          n  \n",
       "3          n  \n",
       "4          n  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove columns which don't contribute to modelling directly\n",
    "df.drop([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17, 51, 52, 53], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>...</th>\n",
       "      <th>43</th>\n",
       "      <th>44</th>\n",
       "      <th>45</th>\n",
       "      <th>46</th>\n",
       "      <th>47</th>\n",
       "      <th>48</th>\n",
       "      <th>49</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>54</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>raw_area</td>\n",
       "      <td>raw_feret_max</td>\n",
       "      <td>raw_feret_min</td>\n",
       "      <td>raw_feret_mean</td>\n",
       "      <td>raw_perimeter</td>\n",
       "      <td>raw_convex_perimeter</td>\n",
       "      <td>raw_legendre_major</td>\n",
       "      <td>raw_legendre_minor</td>\n",
       "      <td>abd_area</td>\n",
       "      <td>abd_diameter</td>\n",
       "      <td>...</td>\n",
       "      <td>symmetry</td>\n",
       "      <td>circularity_hu</td>\n",
       "      <td>intensity_calimage</td>\n",
       "      <td>raw_convex_hull_area</td>\n",
       "      <td>raw_filled_area</td>\n",
       "      <td>filled_area</td>\n",
       "      <td>feret_max_angle</td>\n",
       "      <td>feret_min_angle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>noctiluca</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>647</td>\n",
       "      <td>142</td>\n",
       "      <td>9</td>\n",
       "      <td>91.6667</td>\n",
       "      <td>372.652</td>\n",
       "      <td>284.914</td>\n",
       "      <td>146.923</td>\n",
       "      <td>7.6436</td>\n",
       "      <td>41255.4</td>\n",
       "      <td>229.19</td>\n",
       "      <td>...</td>\n",
       "      <td>0.5029</td>\n",
       "      <td>0.0771</td>\n",
       "      <td>0</td>\n",
       "      <td>767</td>\n",
       "      <td>655</td>\n",
       "      <td>41860.7</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>2019-11-13T14:53:38.724</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>223</td>\n",
       "      <td>105</td>\n",
       "      <td>7</td>\n",
       "      <td>67.5556</td>\n",
       "      <td>215.505</td>\n",
       "      <td>208.94</td>\n",
       "      <td>107.622</td>\n",
       "      <td>4.8217</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>116.957</td>\n",
       "      <td>...</td>\n",
       "      <td>0.3763</td>\n",
       "      <td>0.0489</td>\n",
       "      <td>0</td>\n",
       "      <td>383</td>\n",
       "      <td>223</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>40</td>\n",
       "      <td>-45</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201</td>\n",
       "      <td>104</td>\n",
       "      <td>9</td>\n",
       "      <td>66.8889</td>\n",
       "      <td>220.492</td>\n",
       "      <td>207.128</td>\n",
       "      <td>108.251</td>\n",
       "      <td>7.2237</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>108.882</td>\n",
       "      <td>...</td>\n",
       "      <td>0.342</td>\n",
       "      <td>0.0435</td>\n",
       "      <td>0</td>\n",
       "      <td>513.5</td>\n",
       "      <td>201</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>-55</td>\n",
       "      <td>30</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1777</td>\n",
       "      <td>458</td>\n",
       "      <td>21</td>\n",
       "      <td>292.444</td>\n",
       "      <td>968.333</td>\n",
       "      <td>915.64</td>\n",
       "      <td>472.547</td>\n",
       "      <td>14.8068</td>\n",
       "      <td>130636</td>\n",
       "      <td>407.837</td>\n",
       "      <td>...</td>\n",
       "      <td>0.4726</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>0</td>\n",
       "      <td>4344</td>\n",
       "      <td>1777</td>\n",
       "      <td>130636</td>\n",
       "      <td>-85</td>\n",
       "      <td>5</td>\n",
       "      <td>2019-11-13T14:53:38.825</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         18             19             20              21             22  \\\n",
       "0  raw_area  raw_feret_max  raw_feret_min  raw_feret_mean  raw_perimeter   \n",
       "1       647            142              9         91.6667        372.652   \n",
       "2       223            105              7         67.5556        215.505   \n",
       "3       201            104              9         66.8889        220.492   \n",
       "4      1777            458             21         292.444        968.333   \n",
       "\n",
       "                     23                  24                  25        26  \\\n",
       "0  raw_convex_perimeter  raw_legendre_major  raw_legendre_minor  abd_area   \n",
       "1               284.914             146.923              7.6436   41255.4   \n",
       "2                208.94             107.622              4.8217   10743.5   \n",
       "3               207.128             108.251              7.2237   9311.07   \n",
       "4                915.64             472.547             14.8068    130636   \n",
       "\n",
       "             27  ...        43              44                  45  \\\n",
       "0  abd_diameter  ...  symmetry  circularity_hu  intensity_calimage   \n",
       "1        229.19  ...    0.5029          0.0771                   0   \n",
       "2       116.957  ...    0.3763          0.0489                   0   \n",
       "3       108.882  ...     0.342          0.0435                   0   \n",
       "4       407.837  ...    0.4726          0.0202                   0   \n",
       "\n",
       "                     46               47           48               49  \\\n",
       "0  raw_convex_hull_area  raw_filled_area  filled_area  feret_max_angle   \n",
       "1                   767              655      41860.7              -90   \n",
       "2                   383              223      10743.5               40   \n",
       "3                 513.5              201      9311.07              -55   \n",
       "4                  4344             1777       130636              -85   \n",
       "\n",
       "                50                       51         54  \n",
       "0  feret_min_angle                      NaN  noctiluca  \n",
       "1                0  2019-11-13T14:53:38.724          n  \n",
       "2              -45  2019-11-13T14:53:38.825          n  \n",
       "3               30  2019-11-13T14:53:38.825          n  \n",
       "4                5  2019-11-13T14:53:38.825          n  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make row 0 = headers\n",
    "new_header = df.iloc[0] \n",
    "df = df[1:]\n",
    "df.columns = new_header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>raw_area</th>\n",
       "      <th>raw_feret_max</th>\n",
       "      <th>raw_feret_min</th>\n",
       "      <th>raw_feret_mean</th>\n",
       "      <th>raw_perimeter</th>\n",
       "      <th>raw_convex_perimeter</th>\n",
       "      <th>raw_legendre_major</th>\n",
       "      <th>raw_legendre_minor</th>\n",
       "      <th>abd_area</th>\n",
       "      <th>abd_diameter</th>\n",
       "      <th>...</th>\n",
       "      <th>circle_fit</th>\n",
       "      <th>symmetry</th>\n",
       "      <th>circularity_hu</th>\n",
       "      <th>intensity_calimage</th>\n",
       "      <th>raw_convex_hull_area</th>\n",
       "      <th>raw_filled_area</th>\n",
       "      <th>filled_area</th>\n",
       "      <th>feret_max_angle</th>\n",
       "      <th>feret_min_angle</th>\n",
       "      <th>noctiluca</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>647</td>\n",
       "      <td>142</td>\n",
       "      <td>9</td>\n",
       "      <td>91.6667</td>\n",
       "      <td>372.652</td>\n",
       "      <td>284.914</td>\n",
       "      <td>146.923</td>\n",
       "      <td>7.6436</td>\n",
       "      <td>41255.4</td>\n",
       "      <td>229.19</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5029</td>\n",
       "      <td>0.0771</td>\n",
       "      <td>0</td>\n",
       "      <td>767</td>\n",
       "      <td>655</td>\n",
       "      <td>41860.7</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>223</td>\n",
       "      <td>105</td>\n",
       "      <td>7</td>\n",
       "      <td>67.5556</td>\n",
       "      <td>215.505</td>\n",
       "      <td>208.94</td>\n",
       "      <td>107.622</td>\n",
       "      <td>4.8217</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>116.957</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3763</td>\n",
       "      <td>0.0489</td>\n",
       "      <td>0</td>\n",
       "      <td>383</td>\n",
       "      <td>223</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>40</td>\n",
       "      <td>-45</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201</td>\n",
       "      <td>104</td>\n",
       "      <td>9</td>\n",
       "      <td>66.8889</td>\n",
       "      <td>220.492</td>\n",
       "      <td>207.128</td>\n",
       "      <td>108.251</td>\n",
       "      <td>7.2237</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>108.882</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.342</td>\n",
       "      <td>0.0435</td>\n",
       "      <td>0</td>\n",
       "      <td>513.5</td>\n",
       "      <td>201</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>-55</td>\n",
       "      <td>30</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1777</td>\n",
       "      <td>458</td>\n",
       "      <td>21</td>\n",
       "      <td>292.444</td>\n",
       "      <td>968.333</td>\n",
       "      <td>915.64</td>\n",
       "      <td>472.547</td>\n",
       "      <td>14.8068</td>\n",
       "      <td>130636</td>\n",
       "      <td>407.837</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.4726</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>0</td>\n",
       "      <td>4344</td>\n",
       "      <td>1777</td>\n",
       "      <td>130636</td>\n",
       "      <td>-85</td>\n",
       "      <td>5</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>442</td>\n",
       "      <td>167</td>\n",
       "      <td>9</td>\n",
       "      <td>107.111</td>\n",
       "      <td>361.823</td>\n",
       "      <td>333.168</td>\n",
       "      <td>181.221</td>\n",
       "      <td>5.2739</td>\n",
       "      <td>26027</td>\n",
       "      <td>182.04</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1174</td>\n",
       "      <td>0.0342</td>\n",
       "      <td>0</td>\n",
       "      <td>678</td>\n",
       "      <td>442</td>\n",
       "      <td>26027</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0 raw_area raw_feret_max raw_feret_min raw_feret_mean raw_perimeter  \\\n",
       "1      647           142             9        91.6667       372.652   \n",
       "2      223           105             7        67.5556       215.505   \n",
       "3      201           104             9        66.8889       220.492   \n",
       "4     1777           458            21        292.444       968.333   \n",
       "5      442           167             9        107.111       361.823   \n",
       "\n",
       "0 raw_convex_perimeter raw_legendre_major raw_legendre_minor abd_area  \\\n",
       "1              284.914            146.923             7.6436  41255.4   \n",
       "2               208.94            107.622             4.8217  10743.5   \n",
       "3              207.128            108.251             7.2237  9311.07   \n",
       "4               915.64            472.547            14.8068   130636   \n",
       "5              333.168            181.221             5.2739    26027   \n",
       "\n",
       "0 abd_diameter  ... circle_fit symmetry circularity_hu intensity_calimage  \\\n",
       "1       229.19  ...          0   0.5029         0.0771                  0   \n",
       "2      116.957  ...          0   0.3763         0.0489                  0   \n",
       "3      108.882  ...          0    0.342         0.0435                  0   \n",
       "4      407.837  ...          0   0.4726         0.0202                  0   \n",
       "5       182.04  ...          0   0.1174         0.0342                  0   \n",
       "\n",
       "0 raw_convex_hull_area raw_filled_area filled_area feret_max_angle  \\\n",
       "1                  767             655     41860.7             -90   \n",
       "2                  383             223     10743.5              40   \n",
       "3                513.5             201     9311.07             -55   \n",
       "4                 4344            1777      130636             -85   \n",
       "5                  678             442       26027             -90   \n",
       "\n",
       "0 feret_min_angle noctiluca  \n",
       "1               0         n  \n",
       "2             -45         n  \n",
       "3              30         n  \n",
       "4               5         n  \n",
       "5               0         n  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 375 entries, 1 to 375\n",
      "Data columns (total 34 columns):\n",
      "raw_area                375 non-null object\n",
      "raw_feret_max           375 non-null object\n",
      "raw_feret_min           375 non-null object\n",
      "raw_feret_mean          375 non-null object\n",
      "raw_perimeter           375 non-null object\n",
      "raw_convex_perimeter    375 non-null object\n",
      "raw_legendre_major      375 non-null object\n",
      "raw_legendre_minor      375 non-null object\n",
      "abd_area                375 non-null object\n",
      "abd_diameter            375 non-null object\n",
      "length                  375 non-null object\n",
      "width                   375 non-null object\n",
      "esd_diameter            375 non-null object\n",
      "fd_diameter             375 non-null object\n",
      "perimeter               375 non-null object\n",
      "convex_perimeter        375 non-null object\n",
      "intensity               375 non-null object\n",
      "sigma_intensity         375 non-null object\n",
      "sum_intensity           375 non-null object\n",
      "compactness             375 non-null object\n",
      "elongation              375 non-null object\n",
      "roughness               375 non-null object\n",
      "edge_gradient           375 non-null object\n",
      "elapsed_time            375 non-null object\n",
      "circle_fit              375 non-null object\n",
      "symmetry                375 non-null object\n",
      "circularity_hu          375 non-null object\n",
      "intensity_calimage      375 non-null object\n",
      "raw_convex_hull_area    375 non-null object\n",
      "raw_filled_area         375 non-null object\n",
      "filled_area             375 non-null object\n",
      "feret_max_angle         375 non-null object\n",
      "feret_min_angle         375 non-null object\n",
      "noctiluca               375 non-null object\n",
      "dtypes: object(34)\n",
      "memory usage: 99.7+ KB\n"
     ]
    }
   ],
   "source": [
    "#check for null values\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>noctiluca</th>\n",
       "      <th>nocti_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>196</td>\n",
       "      <td>y</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>198</td>\n",
       "      <td>n</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199</td>\n",
       "      <td>y</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>200</td>\n",
       "      <td>y</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0   noctiluca  nocti_code\n",
       "1           n           0\n",
       "2           n           0\n",
       "3           n           0\n",
       "4           n           0\n",
       "5           n           0\n",
       "..        ...         ...\n",
       "196         y           1\n",
       "197         n           0\n",
       "198         n           0\n",
       "199         y           1\n",
       "200         y           1\n",
       "\n",
       "[200 rows x 2 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#convert yeses and nos under noctiluca column to 0 and 1\n",
    "lb_nocti = LabelEncoder()\n",
    "df[\"nocti_code\"] = lb_nocti.fit_transform(df[\"noctiluca\"])\n",
    "df[[\"noctiluca\", \"nocti_code\"]].head(200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove original noctiluca column\n",
    "df.drop('noctiluca', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>raw_area</th>\n",
       "      <th>raw_feret_max</th>\n",
       "      <th>raw_feret_min</th>\n",
       "      <th>raw_feret_mean</th>\n",
       "      <th>raw_perimeter</th>\n",
       "      <th>raw_convex_perimeter</th>\n",
       "      <th>raw_legendre_major</th>\n",
       "      <th>raw_legendre_minor</th>\n",
       "      <th>abd_area</th>\n",
       "      <th>abd_diameter</th>\n",
       "      <th>...</th>\n",
       "      <th>circle_fit</th>\n",
       "      <th>symmetry</th>\n",
       "      <th>circularity_hu</th>\n",
       "      <th>intensity_calimage</th>\n",
       "      <th>raw_convex_hull_area</th>\n",
       "      <th>raw_filled_area</th>\n",
       "      <th>filled_area</th>\n",
       "      <th>feret_max_angle</th>\n",
       "      <th>feret_min_angle</th>\n",
       "      <th>nocti_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>647</td>\n",
       "      <td>142</td>\n",
       "      <td>9</td>\n",
       "      <td>91.6667</td>\n",
       "      <td>372.652</td>\n",
       "      <td>284.914</td>\n",
       "      <td>146.923</td>\n",
       "      <td>7.6436</td>\n",
       "      <td>41255.4</td>\n",
       "      <td>229.19</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5029</td>\n",
       "      <td>0.0771</td>\n",
       "      <td>0</td>\n",
       "      <td>767</td>\n",
       "      <td>655</td>\n",
       "      <td>41860.7</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>223</td>\n",
       "      <td>105</td>\n",
       "      <td>7</td>\n",
       "      <td>67.5556</td>\n",
       "      <td>215.505</td>\n",
       "      <td>208.94</td>\n",
       "      <td>107.622</td>\n",
       "      <td>4.8217</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>116.957</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3763</td>\n",
       "      <td>0.0489</td>\n",
       "      <td>0</td>\n",
       "      <td>383</td>\n",
       "      <td>223</td>\n",
       "      <td>10743.5</td>\n",
       "      <td>40</td>\n",
       "      <td>-45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201</td>\n",
       "      <td>104</td>\n",
       "      <td>9</td>\n",
       "      <td>66.8889</td>\n",
       "      <td>220.492</td>\n",
       "      <td>207.128</td>\n",
       "      <td>108.251</td>\n",
       "      <td>7.2237</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>108.882</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.342</td>\n",
       "      <td>0.0435</td>\n",
       "      <td>0</td>\n",
       "      <td>513.5</td>\n",
       "      <td>201</td>\n",
       "      <td>9311.07</td>\n",
       "      <td>-55</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1777</td>\n",
       "      <td>458</td>\n",
       "      <td>21</td>\n",
       "      <td>292.444</td>\n",
       "      <td>968.333</td>\n",
       "      <td>915.64</td>\n",
       "      <td>472.547</td>\n",
       "      <td>14.8068</td>\n",
       "      <td>130636</td>\n",
       "      <td>407.837</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.4726</td>\n",
       "      <td>0.0202</td>\n",
       "      <td>0</td>\n",
       "      <td>4344</td>\n",
       "      <td>1777</td>\n",
       "      <td>130636</td>\n",
       "      <td>-85</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>442</td>\n",
       "      <td>167</td>\n",
       "      <td>9</td>\n",
       "      <td>107.111</td>\n",
       "      <td>361.823</td>\n",
       "      <td>333.168</td>\n",
       "      <td>181.221</td>\n",
       "      <td>5.2739</td>\n",
       "      <td>26027</td>\n",
       "      <td>182.04</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1174</td>\n",
       "      <td>0.0342</td>\n",
       "      <td>0</td>\n",
       "      <td>678</td>\n",
       "      <td>442</td>\n",
       "      <td>26027</td>\n",
       "      <td>-90</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0 raw_area raw_feret_max raw_feret_min raw_feret_mean raw_perimeter  \\\n",
       "1      647           142             9        91.6667       372.652   \n",
       "2      223           105             7        67.5556       215.505   \n",
       "3      201           104             9        66.8889       220.492   \n",
       "4     1777           458            21        292.444       968.333   \n",
       "5      442           167             9        107.111       361.823   \n",
       "\n",
       "0 raw_convex_perimeter raw_legendre_major raw_legendre_minor abd_area  \\\n",
       "1              284.914            146.923             7.6436  41255.4   \n",
       "2               208.94            107.622             4.8217  10743.5   \n",
       "3              207.128            108.251             7.2237  9311.07   \n",
       "4               915.64            472.547            14.8068   130636   \n",
       "5              333.168            181.221             5.2739    26027   \n",
       "\n",
       "0 abd_diameter  ... circle_fit symmetry circularity_hu intensity_calimage  \\\n",
       "1       229.19  ...          0   0.5029         0.0771                  0   \n",
       "2      116.957  ...          0   0.3763         0.0489                  0   \n",
       "3      108.882  ...          0    0.342         0.0435                  0   \n",
       "4      407.837  ...          0   0.4726         0.0202                  0   \n",
       "5       182.04  ...          0   0.1174         0.0342                  0   \n",
       "\n",
       "0 raw_convex_hull_area raw_filled_area filled_area feret_max_angle  \\\n",
       "1                  767             655     41860.7             -90   \n",
       "2                  383             223     10743.5              40   \n",
       "3                513.5             201     9311.07             -55   \n",
       "4                 4344            1777      130636             -85   \n",
       "5                  678             442       26027             -90   \n",
       "\n",
       "0 feret_min_angle nocti_code  \n",
       "1               0          0  \n",
       "2             -45          0  \n",
       "3              30          0  \n",
       "4               5          0  \n",
       "5               0          0  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    218\n",
       "1    157\n",
       "Name: nocti_code, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check counts of each code\n",
    "df['nocti_code'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a238e5450>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histo for fun\n",
    "sns.countplot(df['nocti_code'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#separate dataset as response variable and feature variables\n",
    "X=df.drop('nocti_code', axis=1)\n",
    "y=df['nocti_code']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train and test splitting of data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apply standard scaling\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train)\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#random forest classifier\n",
    "rfc = RandomForestClassifier(n_estimators=200)\n",
    "rfc.fit(X_train, y_train)\n",
    "pred_rfc = rfc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_rfc[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        47\n",
      "           1       1.00      1.00      1.00        28\n",
      "\n",
      "    accuracy                           1.00        75\n",
      "   macro avg       1.00      1.00      1.00        75\n",
      "weighted avg       1.00      1.00      1.00        75\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#performance\n",
    "print(classification_report(y_test, pred_rfc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[47  0]\n",
      " [ 0 28]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, pred_rfc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
